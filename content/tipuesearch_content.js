var tipuesearch = {"pages": [{'title': '關於', 'text': '倉庫：\xa0  https://github.com/mdewcm2023/site-Hongbolin0408 \n 網站：\xa0\xa0 https://mdewcm2023.github.io/site-Hongbolin0408 \n \n \n', 'tags': '', 'url': '關於.html'}, {'title': '權限', 'text': '近端倉儲的設定檔案:倉儲目錄下 .git中的config. 代表倉儲的 configuration flie (設定檔案) \n', 'tags': '', 'url': '權限.html'}, {'title': '提交', 'text': 'commit \n git commit -m \n message \n 指令執行時，隨後要接上提交字串，說明本次提交的改版說明 \n', 'tags': '', 'url': '提交.html'}, {'title': '補課', 'text': '', 'tags': '', 'url': '補課.html'}, {'title': 'New bing', 'text': '提問: 想了解有關使用 cmsimde 和 GitHub Pages 創建靜態網站的具體信息 \n 要使用 cmsimde 和 GitHub Pages 創建靜態網站，您需要執行以下步驟： \n \n 在 github.com 建立一個新倉儲 \n 針對新倉儲設定 Github Pages,\xa0 以 main branch 設為網站根目錄 \n 將倉儲 git clone 到近端, 加上 cmsimde 程式, 並將 up_dir 內容複製到倉儲根目錄 \n 在近端執行動態網站, 用來編輯動態網站與靜態網站內容 (透過動態網站內容 generate_pages 而產生) \n 以 git add ., git commit -m "提交說明字串", git push (git commit 指令需要有身分設定, 也就是 home_ipv6 或 home_ipv4\xa0 目錄中的 user.name 與 user.email 進行提交, 至於 git push 需要 .git/config 中 url 可以透過 token 標示倉儲存取權, 而 home_ipv6/.gitconfig 若在純 IPv6 下還需要有 http.proxy 的設定) \n 持續利用 localhost 中的動態網站修改內容後, 轉為靜態然後重複上一個 acp 流程將改版送到 github.com \n \n', 'tags': '', 'url': 'New bing.html'}, {'title': '拉回請求', 'text': '當 github 用戶對特定倉儲無直接存取權的時候: \n \n 保留該特定倉儲的所有資料 - 登入 github 帳號, 按 fork 之後， 將該倉儲放入自己的帳號裡面 \n 修改該倉儲的資料 (找到倉儲內的要修改的資料 ， 更改後請原始倉儲擁有者可以內容合併), fork 後可以在自己的帳號下改版, 然後送出 pull requests (拉回請求, 請求原始倉儲作者可以 review 後, 決定是否合併) \n', 'tags': '', 'url': '拉回請求.html'}]};